name: Generate Sri Lanka EPG Filter

on:
  schedule:
    - cron: "30 0 * * *"  # Runs at 12:30 AM UTC (12:30 PM AKL)
  workflow_dispatch:

jobs:
  filter-lk-channels:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Verify EPG File Exists
      run: |
        if [ ! -f "public/epg.xml" ]; then
          echo "Error: public/epg.xml not found!"
          exit 1
        fi
        echo "Found EPG file with size: $(du -h public/epg.xml | cut -f1)"

    - name: Create Filter Script
      run: |
        cat << 'EOF' > filter_lk.py
        import xml.etree.ElementTree as ET
        import os
        from datetime import datetime

        # Configuration
        INPUT_FILE = "public/epg.xml"
        OUTPUT_FILE = "public/lk.xml"
        CHANNELS = [
            "ADA DERANA 24", "ART Television", "Buddhist TV", "Channel C", 
            "Channel One", "Citi Hitz", "Damsathara TV", "God TV/Swarga TV", 
            "Haritha TV", "Hi TV", "Hiru TV", "ITN", "Jaya TV", "Monara TV", 
            "Nethra TV", "Pragna TV", "Rangiri Sri Lanka", "Ridee TV", 
            "Rupavahini", "Shakthi TV", "Shraddha TV", "Sirasa TV", 
            "Siyatha TV", "Supreme TV", "Swarnawahini Live", "Swarnawahini",
            "TV Derana", "TV Didula", "TV1 Sri Lanka", "Vasantham TV", 
            "ThePapare 1"
        ]

        def log(message):
            print(f"[{datetime.now().isoformat()}] {message}")

        def filter_epg():
            try:
                log(f"Starting EPG filtering for {len(CHANNELS)} Sri Lankan channels")
                
                # Parse XML
                tree = ET.parse(INPUT_FILE)
                root = tree.getroot()
                
                # Create new XML structure
                new_root = ET.Element('tv')
                channel_map = {}
                
                # Filter channels
                for channel in root.findall('channel'):
                    name = channel.find('display-name').text
                    if name in CHANNELS:
                        new_root.append(channel)
                        channel_map[channel.attrib['id']] = name
                        log(f"Added channel: {name}")
                
                # Filter programs
                program_count = 0
                for program in root.findall('programme'):
                    if program.attrib['channel'] in channel_map:
                        new_root.append(program)
                        program_count += 1
                
                # Write output
                ET.ElementTree(new_root).write(
                    OUTPUT_FILE,
                    encoding='utf-8',
                    xml_declaration=True
                )
                
                log(f"Successfully created {OUTPUT_FILE}")
                log(f"Total channels: {len(channel_map)}")
                log(f"Total programs: {program_count}")
                return True
                
            except Exception as e:
                log(f"Error: {str(e)}")
                return False

        if __name__ == "__main__":
            if not os.path.exists(INPUT_FILE):
                log(f"Input file not found: {INPUT_FILE}")
                exit(1)
                
            success = filter_epg()
            exit(0 if success else 1)
        EOF

    - name: Run Filter Script
      run: |
        python3 filter_lk.py

    - name: Verify Output File
      run: |
        echo "Generated file details:"
        ls -la public/lk.xml
        echo "First 5 lines:"
        head -n 5 public/lk.xml
        echo "Channel count:"
        grep -c '<channel' public/lk.xml
        echo "Program count:"
        grep -c '<programme' public/lk.xml

    - name: Commit Changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git add public/lk.xml
        git commit -m "Update Sri Lanka EPG [$(date +'%Y-%m-%d %H:%M:%S')]"
        git pull --rebase origin main
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
