name: Generate Sri Lanka EPG

on:
  schedule:
    - cron: "30 0 * * *"  # Runs at 12:30 AM UTC (12:30 PM AKL)
  workflow_dispatch:

jobs:
  generate-lk-epg:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install XML Utilities
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils xmlstarlet
        pip install defusedxml

    - name: Create generate_lk.py
      run: |
        cat << 'EOF' > generate_lk.py
        #!/usr/bin/env python3
        """
        Sri Lanka EPG Filter - Processes XMLTV files to extract Sri Lankan channels
        """

        import xml.etree.ElementTree as ET
        from defusedxml.ElementTree import parse
        import os
        import re
        import logging
        from datetime import datetime
        import argparse

        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('epg_filter.log'),
                logging.StreamHandler()
            ]
        )

        class EPGFilter:
            """Handles filtering of EPG XML data for Sri Lankan channels"""
            
            CHANNELS = [
                # News
                r"ADA DERANA(?: 24)?", r"Hiru TV", r"Sirasa TV", r"Swarnawahini(?: Live)?",
                r"TV Derana", r"ITN", r"Rupavahini", r"Jaya TV",
                
                # Entertainment
                r"ART Television", r"Channel C", r"Channel One", r"Hi TV",
                r"Shakthi TV", r"TV1 Sri Lanka", r"Vasantham TV",
                
                # Religious
                r"Buddhist TV", r"God TV/Swarga TV", r"Shraddha TV",
                
                # Sports
                r"ThePapare \d", r"Citi Hitz",
                
                # Regional
                r"Damsathara TV", r"Haritha TV", r"Monara TV", r"Nethra TV",
                r"Pragna TV", r"Rangiri Sri Lanka", r"Ridee TV", r"Supreme TV",
                r"Siyatha TV", r"TV Didula"
            ]

            def __init__(self, input_file, output_file):
                self.input_file = input_file
                self.output_file = output_file
                self.namespace = {'ns': 'urn:oasis:names:tc:tv:electronic:programming-guide:1.0'}
                self.channel_map = {}
                self.program_count = 0

            def _sanitize_xml(self):
                """Pre-process XML to fix common issues"""
                try:
                    with open(self.input_file, 'r', encoding='utf-8', errors='replace') as f:
                        content = f.read()
                    
                    # Fix common XML issues
                    content = re.sub(r'&(?!(amp|lt|gt|quot|apos);)', '&amp;', content)
                    content = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F]', '', content)
                    
                    # Write sanitized temporary file
                    temp_file = f"{self.input_file}.tmp"
                    with open(temp_file, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    return temp_file
                
                except Exception as e:
                    logging.error(f"XML sanitization failed: {str(e)}")
                    raise

            def _match_channel(self, channel_name):
                """Fuzzy match channel names with regex patterns"""
                try:
                    if not channel_name:
                        return False
                    return any(re.search(pattern, channel_name, re.IGNORECASE) 
                              for pattern in self.CHANNELS)
                except Exception as e:
                    logging.warning(f"Channel matching error: {str(e)}")
                    return False

            def process(self):
                """Main processing method"""
                temp_file = None
                try:
                    # Pre-process XML
                    temp_file = self._sanitize_xml()
                    
                    # Parse XML with security protections
                    tree = parse(temp_file)
                    root = tree.getroot()
                    
                    # Prepare new XML structure
                    ET.register_namespace('', self.namespace['ns'])
                    new_root = ET.Element('tv', self.namespace)
                    
                    # Process channels
                    for channel in root.findall('ns:channel', self.namespace):
                        name_elem = channel.find('ns:display-name', self.namespace)
                        if name_elem is not None and self._match_channel(name_elem.text):
                            new_root.append(channel)
                            self.channel_map[channel
