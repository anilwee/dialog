name: VPN Connect and File Host

on:
  schedule:
    - cron: '00 13 * * *'  # 1:00 AM AKL time
  workflow_dispatch:

jobs:
  vpn-download-host:
    runs-on: ubuntu-latest
    env:
      GIT_AUTHOR_NAME: "GitHub Actions Bot"
      GIT_AUTHOR_EMAIL: "actions@github.com"
      GIT_COMMITTER_NAME: "GitHub Actions Bot"
      GIT_COMMITTER_EMAIL: "actions@github.com"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup VPN Config
      run: |
        # Create VPN files outside of workspace to avoid git detection
        mkdir -p /tmp/vpn_config
        echo "${{ secrets.OVPN_FILE }}" | base64 -d > /tmp/vpn_config/raw_config.ovpn
        fold -w 64 /tmp/vpn_config/raw_config.ovpn > /tmp/vpn_config/config.ovpn
        printf "%s\n" "${{ secrets.VPN_USERNAME }}" "${{ secrets.VPN_PASSWORD }}" > /tmp/vpn_config/auth.txt
        chmod 600 /tmp/vpn_config/auth.txt

    - name: Install and Connect VPN
      run: |
        sudo apt-get update && sudo apt-get install -y openvpn
        sudo openvpn --config /tmp/vpn_config/config.ovpn --auth-user-pass /tmp/vpn_config/auth.txt --daemon
        sleep 20
        echo "VPN IP: $(curl -s --max-time 10 https://ipinfo.io/ip)"

    - name: Download EPG Files
      id: download
      run: |
        if wget -O epg.xml.gz https://watch.livecricketsl.xyz/epg/epg.xml.gz; then
          gunzip -c epg.xml.gz > epg.xml
          echo "download_success=true" >> $GITHUB_OUTPUT
        else
          echo "download_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Update Public Files
      if: steps.download.outputs.download_success == 'true'
      run: |
        mkdir -p public
        # Force remove existing files
        rm -f public/epg.xml public/epg.xml.gz || true
        # Move new files and set permissions
        mv epg.xml epg.xml.gz public/
        chmod 644 public/*

    - name: Commit and Push Changes
      if: steps.download.outputs.download_success == 'true'
      run: |
        # Explicitly add only the files we want to track
        git add public/epg.xml public/epg.xml.gz
        
        # Check if there are changes to commit
        if [ -n "$(git status --porcelain -- public/)" ]; then
          git commit -m "Update EPG files [$(date +'%Y-%m-%d %H:%M:%S')]"
          git pull --rebase origin main
          git push origin main
          echo "Changes pushed successfully"
        else
          echo "No changes in EPG files to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup
      run: |
        sudo pkill openvpn || true
        rm -rf /tmp/vpn_config
